#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('envite-apirest:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')();
const socketAuth = require('socketio-auth');

io.attach(server);

const gameId = 'dummyGameId';

async function verifyUser (_id) { 
  new Promise((resolve, reject) => {
    const User = require('./../models/User');
    return User.findOne({_id})
    .then(userFound => resolve(userFound))
    .catch( _ => reject('USER_NOT_FOUND'));
  })
};

socketAuth, (io, {  
  authenticate: async (socket, data, callback) => {
    const { _id } = data;
    
    try {
      const user = await verifyUser(_id);
      console.log('*       Intento de conexion         *');
      socket.user = user;
      return callback(null, true);
    }
    catch (e) {
      console.log(`Socket ${socket.id} unauthorized.`);
      return callback({ message: 'UNAUTHORIZED' });
    }    
  },
  postAuthenticate: socket => {
    console.log(`Socket ${socket.id} authenticated.`);
    socket.join(gameId);
  },
  disconnect: socket => {
    console.log(`Socket ${socket.id} disconnected.`);
  }
});


/*io.of('/').in(gameId).clients((error, data)=> {
  if (error) throw error;
  const namesList = data.map(player =>io.sockets.connected[player].id);  
  io.of('/').in(gameId).emit('send-list-of-players', namesList);  
  console.log('Lista de jugadores: ', namesList);
});

io.on('chat message', function(msg){
  io.emit('chat message', msg);
  console.log('message: ' + msg);
});

*/


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}