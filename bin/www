#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('envite-apirest:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const io = require('socket.io')(server);
const socketAuth = require('socketio-auth');

const verifyUser = _id => new Promise((resolve, reject) => {
    const User = require('../models/User');
    return User.findOne({_id})
    .then(userFound => resolve(userFound))
    .catch( _ => reject('USER_NOT_FOUND'));
  });

  const verifyGame = _id => new Promise((resolve, reject) => {
    const Game = require('../models/Game');
    return Game.findOne({_id})
    .then(gameFound => resolve(gameFound))
    .catch( _ => reject('GAME_NOT_FOUND'));
  });

socketAuth (io, {  
  authenticate: async (socket, data, callback) => {
    const { _id, gameId } = data;
    try {
      const user = await verifyUser(_id);
      const game = await verifyGame(gameId);
      socket.user = user;
      socket.game = game;
      return callback(null, true);
    }
    catch (e) {
      console.log(`Socket ${socket.id} unauthorized.`);
      return callback({ message: 'UNAUTHORIZED' });
    }    
    },
    postAuthenticate: socket => {
      console.log(`Socket ${socket.id} authenticated.`);
      socket.join(socket.game._id);
    },
    disconnect: socket => {
      console.log(`Socket ${socket.id} disconnected.`);
    }
  });
  io.on('connection', socket =>{
    socket.on('chat message', msg => {
      const {username} = socket.user;
      console.log(`${username}::${msg}`)
      io.to(socket.game._id).emit('chat message', msg, username);
    });

    socket.on('new-seat', (seat, success) => {
        seat = parseInt(seat);
        const user = socket.user;
        const game = socket.game;


        console.log('mesa:', game.table);
        console.log('tipo sitio', typeof seat);
        console.log('sitiomesa:',game.table[seat]);
        //TODO añadir comprobar que la posición es menor que el numero máximo de jugadores
        if (typeof seat === 'number' && !game.table[seat]) {
          if (user.seat || user.seat === 0) game.table[user.seat] = null;
          game.table[seat] = user._id;
          user.seat = seat;
          console.log('Mesa Nueva: ',game.table);
          socket.game = game;
          socket.user = user;
          success(true);
          //emitir nuevo objeto juego actualizado
        }          
        else success(false);
    })
  });

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
